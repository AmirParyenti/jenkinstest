import groovy.json.JsonSlurper

pipeline {
    agent any

    triggers {
        GenericTrigger(
            genericVariables: [
                [key: 'action', value: '$.action'],
                [key: 'merged', value: '$.pull_request.merged']
            ],
            causeString: 'Triggered on pr merge',
            token: 'http://20.115.55.55:8080/ghprbhook/invoke?token=123',
            printContributedVariables: true,
            printPostContent: true,
            silentResponse: false,
            regexpFilterText: '$action#$merged',
            regexpFilterExpression: 'closed#true'
        )
    }

    stages {
        stage('Update Issue') {
            steps {
                script {
                    // Get the commit message
                    def commitMessage = sh(script: "git log -1 --pretty=%B", returnStdout: true).trim()
                    // Extract issue key from commit message
                    def issueKey = extractIssueKey(commitMessage)

                    if (issueKey) {
                        // Define the new status
                        def newStatus = 'Done'

                        // Update status using REST API
                        def transitionId = getTransitionId(issueKey, newStatus)

                        if (transitionId != null) {
                            def response = sh(script: "curl -u jirauser:Strongpassword1 -X POST -H 'Content-Type: application/json' -d '{\"transition\": {\"id\": \"${transitionId}\"}}' http://20.115.55.55:8090/rest/api/2/issue/${issueKey}/transitions", returnStdout: true)
                            println "Response: ${response}"
                        } else {
                            println "Transition ID not found for ${newStatus}."
                        }
                    } else {
                        println "Issue key not found in commit message."
                    }
                }
            }
        }
    }
}

def extractIssueKey(commitMessage) {
    def matcher = (commitMessage =~ /(\w+-\d+)/)
    if (matcher.find()) {
        return matcher.group(0)
    }
    return null
}

def getTransitionId(issueKey, statusName) {
    def response = sh(script: "curl -u jirauser:Strongpassword1 -X GET -H 'Content-Type: application/json' http://20.115.55.55:8090/rest/api/2/issue/${issueKey}/transitions", returnStdout: true).trim()
    def jsonSlurper = new JsonSlurper()
    def transitions = jsonSlurper.parseText(response)

    for (transition in transitions.transitions) {
        println "Transition: ${transition}"
        if (transition.to.name == statusName) {
            return transition.id
        }
    }

    return null
}
